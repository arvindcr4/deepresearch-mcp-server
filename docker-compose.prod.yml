version: '3.8'

services:
  deepresearch-mcp-prod:
    image: deepresearch-mcp-server:${IMAGE_TAG:-stable}
    container_name: deepresearch-mcp-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      LOG_LEVEL: warn
      NEO4J_URI: bolt://neo4j-prod:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD_PROD}
      BACKUP_FILE_DIR: /app/atlas-backups
      BACKUP_MAX_COUNT: 30
      # Production-specific environment variables
      RATE_LIMIT_WINDOW_MS: 900000  # 15 minutes
      RATE_LIMIT_MAX_REQUESTS: 200
      CORS_ORIGIN: ${CORS_ORIGIN:-https://deepresearch.yourdomain.com}
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      # Performance tuning
      NODE_OPTIONS: "--max-old-space-size=2048"
    volumes:
      - prod_backups:/app/atlas-backups
      - prod_logs:/app/logs
    networks:
      - prod-network
    depends_on:
      - neo4j-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deepresearch-prod.rule=Host(`api.deepresearch.yourdomain.com`)"
      - "traefik.http.routers.deepresearch-prod.tls=true"
      - "traefik.http.routers.deepresearch-prod.tls.certresolver=letsencrypt"
      - "traefik.http.services.deepresearch-prod.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.deepresearch-rate-limit.ratelimit.burst=50"
      - "traefik.http.middlewares.deepresearch-rate-limit.ratelimit.average=10"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  neo4j-prod:
    image: neo4j:5-enterprise  # Use enterprise for production
    container_name: neo4j-prod
    restart: always
    ports:
      - "7474:7474"   # HTTP Browser
      - "7687:7687"   # Bolt protocol
    environment:
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD_PROD}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"  # For enterprise edition
      NEO4J_dbms_usage__report_enabled: "false"
      NEO4J_server_bolt_listen__address: ":7687"
      NEO4J_server_bolt_advertised__address: ":7687"
      # Production memory settings
      NEO4J_server_memory_heap_initial__size: "2G"
      NEO4J_server_memory_heap_max__size: "4G"
      NEO4J_server_memory_pagecache_size: "2G"
      NEO4J_server_jvm_additional: "-XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError"
      # Query and transaction settings
      NEO4J_db_logs_query_enabled: "INFO"
      NEO4J_db_logs_query_threshold: "5s"
      NEO4J_db_transaction_timeout: "30s"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
      # Security settings
      NEO4J_dbms_security_auth__minimum__password__length: 12
      NEO4J_dbms_logs_debug_level: "WARN"
      # Backup settings
      NEO4J_server_backup_enabled: "true"
      NEO4J_server_backup_listen__address: ":6362"
      # Clustering (if using multiple instances)
      # NEO4J_causal__clustering_minimum__core__cluster__size__at__formation: 3
      # NEO4J_causal__clustering_minimum__core__cluster__size__at__runtime: 3
    volumes:
      - neo4j_prod_data:/data
      - neo4j_prod_logs:/logs
      - neo4j_prod_import:/var/lib/neo4j/import
      - neo4j_prod_backups:/backups
      - neo4j_prod_plugins:/plugins
    networks:
      - prod-network
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2.0'
        reservations:
          memory: 4G
          cpus: '1.0'

  # Production monitoring stack
  prometheus-prod:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    networks:
      - prod-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana-prod:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: https://monitoring.deepresearch.yourdomain.com
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - prod-network
    depends_on:
      - prometheus-prod

  # Log aggregation
  loki-prod:
    image: grafana/loki:latest
    container_name: loki-prod
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - loki_prod_data:/loki
      - ./monitoring/loki-prod.yml:/etc/loki/local-config.yaml
    networks:
      - prod-network
    command: -config.file=/etc/loki/local-config.yaml

  promtail-prod:
    image: grafana/promtail:latest
    container_name: promtail-prod
    restart: always
    volumes:
      - prod_logs:/var/log/app:ro
      - neo4j_prod_logs:/var/log/neo4j:ro
      - ./monitoring/promtail-prod.yml:/etc/promtail/config.yml
    networks:
      - prod-network
    depends_on:
      - loki-prod
    command: -config.file=/etc/promtail/config.yml

  # Backup service
  backup-service:
    image: deepresearch-mcp-server:${IMAGE_TAG:-stable}
    container_name: backup-service-prod
    restart: always
    environment:
      NODE_ENV: production
      NEO4J_URI: bolt://neo4j-prod:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD_PROD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: 30
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - prod_backups:/app/atlas-backups
      - backup_scripts:/app/scripts
    networks:
      - prod-network
    depends_on:
      - neo4j-prod
    command: ["node", "scripts/backup-scheduler.js"]

volumes:
  prod_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/deepresearch-backups
  prod_logs:
    driver: local
  neo4j_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neo4j-data
  neo4j_prod_logs:
    driver: local
  neo4j_prod_import:
    driver: local
  neo4j_prod_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neo4j-backups
  neo4j_prod_plugins:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  loki_prod_data:
    driver: local
  backup_scripts:
    driver: local

networks:
  prod-network:
    driver: bridge
    name: deepresearch-prod-network
    ipam:
      config:
        - subnet: 172.20.0.0/16